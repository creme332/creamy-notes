[ { "title": "My experience with The Odin Project Foundations course", "url": "/creamy-notes/posts/odin-foundations/", "categories": "Programming", "tags": "the-odin-project", "date": "2022-10-30 00:00:00 +0400", "snippet": "On 19th June 2022, I officially began my web development journey with the help of The Odin Project (TOP), a free open-source course.Almost abandoning TOPI must admit, as a Windows user, I seriously considered finding another web development course after reading the following : We [The Odin Project] can only support what is provided within the scope of our curriculum. We do not support native Windows or any version of Windows Subsystem for Linux (WSL) as a development environment. – From the Installation guideAt first, I was quite hesitant to replace Windows with Linux because I did not want to reinstall all my apps. Other options like dual booting and virtual machines did not appeal to me because of performance issues and the complexity.After doing some research, I decided to go against the tide and install WSL and so far I am getting the best of both worlds : an easy-to-setup Linux environment while being able to keep my Windows apps. I highly recommend following this Fireship lesson to set up WSL easily.Course qualityProsI won’t say much here. There are already hundreds of good reviews of TOP and I whole-heartedly agree with them. You can read some of them here.Things not covered in Foundations UI/UX design : The course will not teach you how to create a website design from scratch or how to choose the correct color palette for your website. You will either have to learn these things on your own or take inspiration from existing websites on the internet. Responsive design : This topic is covered only in the later stages of the full stack course so unless you self-learn it, your websites will not look great on different screen sizes. Search-engine-optimization : You will not learn how to improve the discoverability of websites on search engines. This will limit the traffic to your projects. CSS animations : This topic is covered only in the full stack course. Writing a good Github README : I have seen a lot of great TOP projects which are held back by their mediocre README consisting of only 1-2 lines. Unlike some other online courses TOP does not give you any certificates. However this should not be a deciding factor since most online certificates are worthless.StatisticsThe amount of time you take to complete the Foundations course totally depends on the amount of work you put in. In my case, I took 2 months (43 days of work to be exact) to complete the Foundations course (19 June 2022 - 20 August 2022).Things to keep in mind I had previous programming experience in VB.NET, C++ and Python which probably made learning JavaScript easier. I skipped some of the additional resources found in the course. I was free at that time (no work/school) and on some days I managed to put in 8-10 hours of work. I devoted most of my time to the projects. Some projects took as long as 1 week of work.Timelinepie title Time breakdown \"Recipes\": 20.9 \"Landing page\": 9.3 \"Rock Paper Scissors\": 18.6 \"Etch a sketch\": 16.3 \"Calculator\": 7.0 \"Theory\" : 27.9Recipe project (9 days)27 June : Built project with pure HTML.28 June : Built 2nd version of project with pure HTML and CSS.2-3 July : Built 3rd version with Flexbox for practice.21-25 July : I was not satisfied with the previous version and started from scratch again to build a 4th version.Landing page project (4 days)7-10 July : Built a responsive Landing page with flexbox and media queries.Rock Paper Scissors project (8 days)12-19 July : Learned CSS animations from Youtube to build the project.Etch-a-sketch project (7 days)25-31 July : I implemented “complex” features like Paint bucket fill, Undo/Redo. This was a fun project to work on.Calculator project (3 days)13-15 August : I did not want to spend too much time on this project but I still wanted to create something totally different from others. I finally settled for a basic version of an abacus.This project served as inspiration for my advanced abacus project. You can view all my projects here.Advice for myself if I had to restart over Join the TOP discord and seek feedback on my projects. Do not feel intimidated by the projects found in the Solutions section. It’s ok to take breaks. Create a github project template to save time on setting up your projects." }, { "title": "Resources to self-learn A-level Further Mathematics", "url": "/creamy-notes/posts/further-maths/", "categories": "Maths", "tags": "a-level", "date": "2022-08-30 00:00:00 +0400", "snippet": "Last year, I took up the challenge to self-learn Cambridge A-level Further Mathematics and in the process I came across a lot of interesting free high-quality online resources which have helped me a lot. The goal of this post is to compile all these resources in one place. I am not affiliated in any way with the resources mentioned below. The order in which the resources appear is arbitrary and some of the links provided may contain copyrighted material.Books Resource Description EdExcel books Google Drive folder containing PDF books of A-level Pure, Mechanics, Statistics, Decision mathematics, Core Pure for the EdExcel exams. CIE books Google Drive folder containing complete Cambridge A-level Further Maths book and some other books on Pure mathematics. Oxford Further Pure Mathematics A free ebook provided by PapaCambridge. Other Further Maths books A Google document containing download links for other Further Maths books. OpenStax Peer-reviewed, openly licensed and 100% free books. Libretext Online textbook platform Multivariable Calculus By James Stewart Not catered for A-level syllabus but some chapters (Polar coordinates, vectors, differential equations) are worth a read. Questions It is important, therefore, that those who prepare for an examination of this type do not fall back entirely on routine examples. – Cambridge Examiners’ Report [9231_w03_er]Practising similar questions from past papers over and over again leads to diminishing returns. Here are websites where you can find non-routine questions ranging in difficulty : Resource Description Madamaths Great range of topical questions. Isaac Physics Online learning platform created by Cambridge itself. Questions are based on past papers and are arranged by topic. Hints are offered for each question. Underground Mathematics A database of questions, some dating from the 1950s, across multiple exam boards past papers. Hints and step-by-step explanations are offered for each question. Maths and Physics Tutor Topical questions along with their solutions. Dr Oliver Maths Topical questions along with their solutions. Dr Frost Maths Online learning platform with worksheets from a range of examination boards. Pre-2010 Cambridge A-level Maths (9709) M2 past papers (Paper 52) Questions in these past papers are relevant to Cambridge A-level Further Mechanics. mathedup Topical questions along with their solutions. STEP papers Admission test past papers with quite challenging questions. The difficulty level is way above the Cambridge past papers questions but the questions are still worth a shot if you want to test your understanding of Further Maths. mathdistinction Challenging questions for A-level Maths with some questions relevant to A-level Further Maths. Notes Resource Description Cambridge AS &amp; A Level Further Mathematics Full book I used this book extensively for mechanics and statistics. It covered my Further Maths syllabus (9231) entirely. Kinematics Fundamental by Sunil Kumar Openstax book which I used to practice the projectile motion chapter in Further Mechanics. It has notes and questions different from the usual past paper questions. Solutions are available as well. Cambridge A-Level Further Maths Scheme of Work Contains links to learning resources for each chapter. Interactive Linear Algebra PDF by GaTech Highly recommend reading. You can easily skip the sub-chapters not relevant to the A-level syllabus. STAT 415 Online notes by PennState Online repository for statistics notes and some sample questions. I personally used it to learn inference testing and non-parametric tests. Kinematics Fundamental by Sunil Kumar Great notes, questions, and explanations on Kinematics. Some questions are quite challenging. Paul’s Online Notes University notes some of which are relevant to A-level Further Maths. Also has a practice problems section. I personally used the website to learn about the integral test. Hyperbolic notes Notes from Calculus 1 book from OpenStax. Brilliant.org Has good notes on roots of polynomial University lecture notesYou can easily find university lecture notes of prestigious universities for most topics by searching &lt;chapter_name&gt; university lecture notes pdf on Google. Here are some of the lecture notes that I used : Polar curve sketching Mathematical induction by the University of Sydney Mathematical induction by Cornell University Hyperbolic functions by Western Sydney university Vectors by the University of OxfordYoutube videos Resource Description GenieusHub Further Pure playlist Topical tutorial videos for Cambridge A-level Further Pure. TL maths Youtube playlists on A-level Further Pure maths. Organic chemistry tutor statistic playlist Video explanations + walkthroughs on how to solve statistics questions. 3Blue1Brown Essence of Linear Algebra Videos to understand the geometry behind concepts like eigenvectors, matrices, … Crash Course for statistics Some helpful statistics videos to understand normal distributions and Chi-Squared tests. blackpenredpen Videos on integrations, polar curve sketching, differential equations, and much more. Tom Rock Maths Videos on linear algebra and differential equations. MIT OpenCourseWare Their maths and physics courses are the most relevant for FM. Example :differential equations video. Lecture notes and questions are available on their website. SupportGetting stuck on a question or not understanding a chapter can be frustrating especially when you are self-learning. Here are some places to find help : Resource Description Cambridge Examiners Report If you are stuck on a question from a Cambridge paper, the examiner’s report can be of great help. It points out the common mistakes students are making on each question and occasionally contains explanations. Examiners’ reports have the _er tag in their names. For example 9231_w20_er.pdf. Math Exchange Question-answer forum for maths questions. Use it for questions on Pure mathematics. Physics Exchange Question-answer forum for maths questions. Use it for questions on Mechanics. Cross Validated Question-answer forum for statistics questions. Use it for questions on statistics. physicsforums Consult the threads on maths and physics. r/furthermaths, r/alevel These subreddits are used by A-level students who might be able to help you. studentroom studentroom has some study help forums that are worth mentioning even though I’ve never used them. Some of the above forums have a strict etiquette for posting questions. To increase the chances of someone helping you, you must ask a good question in the right place. Read here and here on how to ask a good question. Feel free to send me an email of your problem if you are not able to find help.CalculatorsVerifying the correctness of your work is essential as answer sheets and mark schemes are prone to errors. Here are some calculators which may help you: Resource Description Wolfram Alpha Advanced online calculator that can be used for integration, differentiation, calculating area under curve, solving polynomial and differential equations, and much more. Desmos 2D graphing calculator. Extremely helpful for polar curve sketching and transformations in Pure. Geogebra matrix transformations Extremely helpful for transformations in Pure. Geogebra 3D calculator Can be used as a visualisation tool for vectors, planes, and matrices. Integration calculator Step-by-step explanation on how to integrate an expression. Derivative calculator Step-by-step explanation on how to differentiate an expression. Visualising planes in GeogebraProgress trackingI used Notion, a digital note-taking app, for storing my notes and tracking unsolved questions and past papers.My past papers working schedule for the few weeks leading to my examsMy notes on polar coordinates in NotionOther resourcesHere are other websites/videos with additional resources : Resource Description OCR Further Maths blog Other helpful resources for self-learning FM. Advice for FM A youtube video where Ray Amjad gives some tips for learning FM. I remember watching this video just before starting to learn FM. " }, { "title": "How to build a real-time chat app with Google Sheets", "url": "/creamy-notes/posts/chat-app-appscript/", "categories": "Programming", "tags": "appscript, tutorial", "date": "2022-08-29 00:00:00 +0400", "snippet": "Having scarce knowledge of backend techonologies, I decided to build 1bxoxb1, a simple anonymous chat app, with Google Sheets. The back-end code, written entirely in Google App Script, surprisingly took less than 40 lines of code.A real-time no-login online chat app Github repository Live demoThe goal of this post is to document the process to build this project.Getting started Basic knowledge of HTML, CSS and JS is required. Watch a video on the basic features of the online AppScript IDE. Read about HTML templates and scriplets. Read about the best practices in AppScript. Watch this tutorial on how to interact with Google Sheets.Build projectCreate a Google Sheets database Go to Google Sheets to create a spreadsheet. The spreadsheet name is not important. Open your spreadsheet and change the first empty row to : date username message             Create AppScript project Go to the AppScript dashboard to create and open a new appscript project. The project name is not important. There is currently a single file Code.gs in your project. Create 3 new HTML files to make your file structure look like this : Files│_ Code.gs|_ Index.html|_ Stylesheet.html|_ JavaScript.html Write server-side code The server-side code is written in the Code.gs file.Add spreadsheet informationAdd 3 global constants to store database information.const SPREADSHEET_URL = \"PLACE YOUR URL HERE\";const spreadsheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL);const worksheet = spreadsheet.getSheetByName(\"YOUR SHEET NAME\");Add boilerplate codefunction doGet() { return HtmlService .createTemplateFromFile('Index') .evaluate();} function include(filename) { return HtmlService.createHtmlOutputFromFile(filename) .getContent();}The doGet() function for templated HTML generates an HtmlTemplate object from the HTML file. Then doGet() calls its evaluate() method to execute the scriptlets and convert the template into an HtmlOutput object that the script can serve to the user.The custom server-side include() function imports the Stylesheet.html and JavaScript.html file content into the Index.html file. When called using printing scriptlets, this function imports the specified file content into the current file.Update database with data from clientWhen a user sends a message, the server-side function addNewRowToSheet() is called from the client-side.addNewRowToSheet() will append the date, the name of the sender, and the message to the spreadsheet.function addNewRowToSheet(username, user_input) { worksheet.appendRow([new Date().toString(), username, user_input]);} The date must be in string format so that it can be passed to the client later. Read more about legal parameters in appscript here.Send spreadsheet to clientgetSpreadsheetData() will return a 2D array containing all database information to the client.function getSpreadsheetData() { //get data from first three columns const AllData = worksheet.getRange(\"A:C\").getValues(); //remove column heading AllData.shift(); // remove empty rows from AllData and return result return AllData.filter(function (el) { return el[0] != \"\"; });}Write client-side codeHTML Edit the Index.html file. Add &lt;?!= include('Stylesheet'); ?&gt; in head tag and &lt;?!= include('JavaScript'); ?&gt; just before end of body tag.&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;base target=\"_top\"&gt; &lt;?!= include('Stylesheet'); ?&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=\"container\"&gt; &lt;div id=\"message-container\"&gt;&lt;/div&gt; &lt;div class=\"bottom-container\"&gt; &lt;textarea placeholder=\"Type a message\" id=\"input-container\" cols=\"30\" rows=\"1\"&gt;&lt;/textarea&gt; &lt;button id=\"sendbtn\"&gt; &gt; &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;?!= include('JavaScript'); ?&gt;&lt;/body&gt;&lt;/html&gt;Wireframe of the websiteCSS Edit the Stylesheet.html file.The CSS code is available here. The code itself is not important and can be modified. Remember to include &lt;style&gt; tags in Stylesheet.html.JavaScript Edit the JavaScript.html file.I will explain only the important parts of the code. The full JS code is available here. Remember to include &lt;script&gt; tags in Stylesheet.html.Send message to databaseEach time the send-btn element is clicked, saveToSpreadsheet() is called. saveToSpreadsheet()takes input from the input-container and calls the server-side function addNewRowToSheet() which then saves the message to the database.function saveToSpreadsheet() { //ignore empty messages if (userInputBox.value == \"\") return; //send username and message to spreadsheet google.script.run.addNewRowToSheet(MY_USERNAME, userInputBox.value); //reset userInputBox userInputBox.value = \"\";}sendButton.addEventListener(\"click\", saveToSpreadsheet)Update messages in real-timeEvery REFRESH_RATE milliseconds, the following line is executed : google.script.run.withSuccessHandler(onSuccess).getSpreadsheetData(); script.run.getSpreadsheetData() calls the server side function getSpreadsheetData(). The withSuccessHandler(onSuccess)part will call the function onSuccess() if the server-side function returns successfully. The return value of getSpreadsheetData(), which is a 2D array, becomes the argument of the OnSuccess() function. onSuccess() will look for new messages since the last time getSpreadsheetData() was called. These messages are then displayed in the message-container element. function updateMessages() { function onSuccess(spreadsheetDataArray) { //loop through new rows since last update const lastRowIndex = spreadsheetDataArray.length - 1; for (let i = currentRowIndex + 1; i &lt;= lastRowIndex; i++) { let date = spreadsheetDataArray[i][0]; let user = spreadsheetDataArray[i][1]; let msg = spreadsheetDataArray[i][2]; let timePosted = getTime(date); // code to add the above information to message-container // .... } currentRowIndex = lastRowIndex; } google.script.run.withSuccessHandler(onSuccess) .getSpreadsheetData(); } setInterval(updateMessages, REFRESH_RATE); The number of messages currently being displayed in the message-container is $ \\text{currentRowIndex + 1} $, where $ \\text{currentRowIndex} $ is a global variable. The default value of REFRESH_RATE is 2000 milliseconds. It can be reduced to make refreshing of messages faster but in doing so, the number of concurrent users on the chat app will be reduced.Deploy project Deploy your project as a web app. The web app requires you to authorize access to your data. If you face the “Sorry unable to open file at this moment” problem, try opening the web app in incognito. Read this for more information.LimitationsProject A maximum of 30 concurrent users is allowed. Google Sheet API allows at most 300 requests per minute.AppScript Online IDE No version control system like Git. No keyboard shortcuts available like in VSCode. Rename Symbol option was not working at the time when I wrote my code." }, { "title": "Understanding the criss-cross multiplication algorithm", "url": "/creamy-notes/posts/criss-cross-multiplication/", "categories": "Maths, Programming", "tags": "algorithms, c++", "date": "2022-07-07 00:00:00 +0400", "snippet": "Back in 2019, I stumbled upon the Criss-Cross multiplication algorithm on Youtube. It comes from Vedic mathematics, a compendium of tricks for increasing the speed of mathematical calculations. The distinguishing feature of this algorithm is the fact that it can be used for mental calculations and it is much faster than the grade-school multiplication algorithm we all learnt.The implementation of the Criss-Cross multiplication algorithm in C++ can be done in less than 50 lines of code and it manages to multiply 1000-digit numbers (in string format) almost instantly. Moreover, when multiplying numbers having less than 1000 digits, it is nearly twice as fast as the Karatsuba algorithm, one of the most popular fast multiplication algorithms in computer science.AlgorithmThere is a sequence of patterns to follow when carrying out the single digit products. For each pattern, compute the sum of all the required single digit products and add the carry from the previous step, if any, to this sum . Prepend the units digit of the sum to our answer so far and carry over the other digits to the next step. Move to next pattern.Pattern for 2-digit multiplication In the following GIFs, the dots represent the digits and each line represent the product of 2 digits. Detailed explanation for $29 \\times 12$ Step 1 : Multiply the digits in the right-most column (\\( 9\\times2 \\)) to obtain \\( 18 \\). Step 1.1 : Write down only unit digit (8 in this case) and carry over the digit in the tens place (1 in this case). The answer so far is \\( 8 \\) and the carry is \\( 1 \\).Step 2 : There are two single-digit multiplications (\\( 2\\times2 \\) and \\( 9\\times1 \\)) to carry out. Sum these products to obtain \\( 13 \\) and add the carry (which is 1) from the previous step. The final sum is \\( 14\\). Step 2.1 : Write down only unit digit (4 in this case) and carry over the digit in the tens place (1 in this case). The answer so far is \\( 48 \\) and the carry is 1. Step 3 : Multiply the digits in the left-most column (\\( 2\\times1 \\)) to obtain 2. Add carry from previous step to current sum to obtain 3. Step 3.1 : Since there are no more steps, prepend the current sum to our answer. Final answer is \\( 348 \\). Pattern for 3-digit multiplicationPattern for 4-digit multiplicationPattern for 5-digit multiplicationThings to note Make use of symmetry to remember the sequence of patterns. For example, notice that the last $n/2$ patterns are simply a reflection in the vertical axis of the first $n/2$ patterns. When the 2 numbers being multiplied have different lengths, simply prepend zeros to the smaller number to make it the same length as the larger number. For example, the Criss-Cross multiplication of $512323$ and $32$ is the same as the Criss-Cross multiplication of $512323$ and $000032$. In such a case, you will notice that there will be fewer single-digit products to carry out.ProofEven though I have not found a formal proof for the correctness of the Criss-Cross algorithm, we can get some insights into why it works by comparing it side-by-side with the grade-school algorithm : We are doing the exact calculations as the grade-school multiplication algorithm. The difference lies in the order in which these calculations are carried out : the Criss-Cross algorithm uses a more efficient order which allows us to work with smaller numbers and gradually build the answer at each step.Codestd::string vedic(std::string a, std::string b) { if (a == \"0\" || b == \"0\")return \"0\"; if (b.length() &gt; a.length()) { std::string t = b; b = a; a = t; } const long long asize = static_cast&lt;long long&gt;(a.size()); const long long bsize = static_cast&lt;long long&gt;(b.size()); long long totalsteps = asize + bsize - 1; std::string ans = \"\"; long long max = asize - 1, min = bsize - 1; long long sum = 0, carry = 0; long long lines = 0; //number of multiplications at each step //Each step finds 1 digit of the answer for (long long step = 1;step &lt;= totalsteps; step++) { sum = 0; //reset sum if (step &lt;= asize) { lines = step; } else { lines = asize - (step - asize); } if (min &lt; 0) { min = 0; max--; if (step &lt; asize) { lines -= step - bsize; } else { lines -= asize - bsize; } } long long i = max, j = min; for (long long k = 0;k &lt; lines;k++) { sum += (a[i] - '0') * (b[j] - '0'); i--; j++; } sum += carry; carry = sum / 10; ans = std::to_string(sum % 10) + ans; min--; } if (carry != 0) ans = std::to_string(carry) + ans; return ans;} Time complexity : $\\mathbb O (n^2)$ Space complexity : $\\mathbb O (1) $Explanationll i = max, j = min;for (ll k = 0; k &lt; lines; k++) { sum += (a[i] - '0') * (b[j] - '0'); i--; j++;}$min$ and $max$ keep track of the region within which the cross-multiplication will take place. $ i $ : pointer used to iterate over $a$ within the range $[min, max]$. $ j $ : pointer used to iterate over $b${: .filepath } within the range $[min, max]$.Case 1 : Both $a$ and $b$ have $n$ digitsThis is the simplest case. The total number of steps required is $2n-1$. (There are $n$ patterns + $n$ reflected patterns. However, the $n$-th pattern is counted twice so we minus $1$.)The number of single digit product (or the number of lines drawn) at each step can be found as follows :if (currentstep &lt;= n) {lines = currentstep;}else {lines = n - (currentstep - n);} // or 2*n - currentstep Step number Number of single digit product required $ 1 $ $1 $ $ 2 $ $ 2 $ $ 3 $ $3 $ $ 4 $ $4 $ $ … $ $ … $ $ n $ $n $ $n+1$ $n-1$ $n+2 $ $n-2 $ $n+3$ $n-3 $ $… $ $…$ $ 2n-1 $ $ 1 $ At each step, we will compute the sum of all the 1-digit multiplications required. From this sum we will obtain the carry for the next step and a digit of our answer.Pseudocode for Case 1Initialise the total number of stepsInitialise min and max to n-1 For each step Determine the number of 1-digit multiplication to be carried out Initialise sum to 0 When the step number becomes &gt; n (or when min becomes negative), set min to 0 and decrement max. For each 1-digit multiplication Increment sum Modify counters to move to next 1-digit multiplication Add previous carry to sum Update carry and answer Decrement min If carry is non-zero, concatenate it to the left of the answer.Return answerCase 2 : $b$ has fewer digits than $a$This case could be eliminated if we simply make both $a$ and $b$ the same length initially by adding leading zeros to $b$. However, this approach is time-consuming because there will be unnecessary and will introduce leading zeros in our final answer which must be removed.To bypass this problem, we simply reduce the total number of steps and the number of single digit products at each step to eliminate cases where the 1-digit multiplication involves a leading zero.The total number of steps is now found using :\\[\\boxed{\\text{totalsteps = length(a) + length(b) - 1}}\\]For each step, we first find the expected number of 1-digit multiplication if $a$ and $b$ were the same length :if (step &lt;= asize) { lines = step;}else { lines= asize - (step- asize); // do not simplify as 2*asize might overflow}When all the digits of $b$ have been traversed, $min$ becomes negative. Previously when $a$ and $b$ were the same length, we exited when $min$ was negative. However, when they differ in length, we cannot exit. Now, each time $min$ reaches the start of $b$, we decrement $max$ and keep $min$ at index 0 of $b$.if (min &lt; 0) { min = 0; max--;}Then we reduce the number of 1-digit multiplication as follows :if (min &lt; 0) { min = 0; max--; if (step &lt; asize) { lines -= step - bsize; } else { lines -= asize - bsize; }}The rest of the code for Case 2 is the same as that in Case 1.Comparison with KaratsubaFrom the table in Case 1, we can deduce that the total number of single digit products carried out by the Criss-Cross algorithm is \\(n^2 + n - 1\\). In comparison, the total number of single digit products for the Karatsuba algorithm is \\(n^{\\log_2 3}\\).In theory, as the numbers being multiplied tend to infinity, the Karatsuba algorithm will perform better. However, for relatively small numbers, the Karatsuba algorithm actually performs worse.In practice, I decided to compare both algorithms using a basic benchmark method (my results should be taken with a grain of salt). The code used for comparing the Criss-Cross algorithm and the Karatsuba algorithm can be found here. Number of digits in each number Number of test cases Avg time for vedic() Avg time of karatsuba() % difference 100 1000 6033 343458 98.2 500 100 2263 131762 98.2 1000 200 172990 5794911 97.0 The unit of time used is microseconds.Final thoughtsWhy use the Criss-Cross algorithm Much simpler to use with pen and paper than the Karatsuba algorithm and the grade-school algorithm. Can be used for mental calculations. The risk of integer overflow is small as it carries out the sum of single-digit products.Why not use the Criss-Cross algorithm Not suitable for multiplying numbers tending to infinity." } ]
